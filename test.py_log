# IPython log file
import os, sys
sys.path.insert(0, '/home/UNIXHOME/etseng/.VENVdefault2/lib/python2.7/site-packages/')
from Bio import SeqIO
import splice_graph as sp
import splice_cycle
import networkx as nx
sys.setrecursionlimit(999999)

def trim_ends(seq): 
    for i in xrange(len(seq)):
        if str.isupper(seq[i]): break
    for j in xrange(len(seq)-1,-1,-1):
        if str.isupper(seq[j]): break
    return seq[i:j+1]
# first trim in.fa away all lower case
f = open('in.trimmed.fa', 'w')
for r in SeqIO.parse(open('in.fa'),'fasta'):
    f.write(">{0}\n{1}\n".format(r.id, trim_ends(r.seq.tostring())))
f.close()

seqweights = {}
# read in the weights for each sequence
with open('in.weights') as f:
    for line in f:
        seqid, weight = line.strip().split('\t')
        seqweights[seqid] = int(weight)

seqdict = SeqIO.to_dict(SeqIO.parse(open('in.trimmed.fa'),'fasta'))
# setting up the DiGraph
G = nx.DiGraph()
node_d = {None: -1}
path_d = {}
reader = SeqIO.parse(open('in.trimmed.fa'),'fasta')
for r in reader: sp.initfunc(G, node_d, path_d, r.seq.tostring(), r.id, seqweights[r.id])
del node_d[None]
mermap = dict((v,k) for k,v in node_d.iteritems())

# resolve all homopolymers
homo_nodes = filter(lambda n: G.has_edge(n, n), G.nodes_iter())
for n in homo_nodes:
    sp.untangle_homopolymer_helper(G, path_d, mermap, n)

# cycle detection and abort if detected
for k,v in path_d.iteritems():
    for x in v:
        if v.count(x) > 1:
            print >> sys.stderr, "CYCLE detected! Abort!"
            os.system("touch CYCLE_DETECTED")
            sys.exit(-1)
#iter = nx.simple_cycles(G)
#for it in iter:
#    print >> sys.stderr, "CYCLE detected! Abort!"
#    os.system("touch CYCLE_DETECTED")
#    sys.exit(-1)

visited = {}
sp.reachability(G, mermap, visited, path_d)

splice_cycle.detect_and_replace_cycle(G, path_d, seqweights, mermap, max(G.nodes()), sp.KMER_SIZE)

nx.write_graphml(G, 'in.0.graphml')

## sanity check: confirm that all sequences can be reconstructed via the collapsed graph
## also check that all nodes are visited
#for n in G.nodes_iter(): assert n in visited
#for k,v in path_d.iteritems():
#    s = sp.stitch_string_from_path(v, mermap)
#    s2 = seqdict[k].seq.tostring().upper()
#    assert s.find(s2) >= 0

while True:
    cur_num_nodes = G.number_of_nodes()
    sp.find_source_bubbles(G, path_d, mermap)
    sp.reachability(G, mermap, {}, path_d)
    sp.find_bubbles(G, path_d, mermap)
    sp.reachability(G, mermap, {}, path_d)
    sp.contract_sinks(G, path_d, mermap)
#    sp.find_dangling_sinks(G, path_d, mermap)
    sp.reachability(G, mermap, {}, path_d)
    if G.number_of_nodes() == cur_num_nodes: break

nx.write_graphml(G, 'in.1.graphml')

keys = path_d.keys()
keys.sort()
good_for, paths = sp.find_minimal_path_needed_to_explain_pathd(G, path_d, keys)
sp.solve_with_lp_and_reduce(good_for, paths, mermap)
sp.run_gmap()

